<!DOCTYPE html>
<html>
	<head>
		<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet' type='text/css'>
		<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/smoothness/jquery-ui.css" />
		<link href="{{ Global.DashboardViews }}css/bootstrap-datetimepicker.min.css" rel="stylesheet" type="text/css" />
		<link href="{{ Global.DashboardViews }}css/bootstrap.min.css" rel="stylesheet" type="text/css" />
		<link href="{{ Global.DashboardViews }}css/dashboard.css" rel="stylesheet" type="text/css" />
	</head>

	<body>
	<div class="row fill">
			<div class="col-lg-1 fill" id="sidePanel">
				{% for sb in sidebar %}
					<div module="{{ sb.module }}" file="{{ sb.class }}" method="{{ sb.method }}">
						<span class="glyphicon glyphicon-{{ sb.icon }}"></span><br />
						{{ sb.title }}
					</div>
				{% endfor %}
			</div>
			<div class="col-lg-11 fill no-padding-left container">
				<div class="fill shadow-left" id="sideBarExtra"></div>
				<div class="pull-left fill shadow-left" id="mainSideBar"></div>
				<div class="pull-left" id="mainContent">hej med dig</div>

				<div id="loader">
					<div class="spinner"></div>
				</div>
			</div>
			
	</div>
				<div class="modal fade" id="DashboardModal">
				  <div class="modal-dialog modal-lg">
				    <div class="modal-content">
				      <div class="modal-header">
				        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				        <h4 class="modal-title">Modal title</h4>
				      </div>
				      <div class="notifications"></div>
				      <form class="form" class="save" method="POST">
					      <div class="modal-body">
					        <p>One fine body&hellip;</p>
					      </div>
				      
				      <div class="modal-footer">
				        <button type="button" class="btn btn-default" data-dismiss="modal">{{ l.get("dashboard.cancel") }}</button>
				        <button type="submit" class="btn btn-primary">{{ l.get("dashboard.save_changes") }}</button>
				        </form>
				      </div>
				    </div>
				  </div>
				</div>

	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" type="text/javascript"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
	<script src="{{ Global.DashboardViews }}js/bootstrap.min.js" type="text/javascript"></script>
	<script src="{{ Global.DashboardViews }}js/json2html.js" type="text/javascript"></script>
	<script src="{{ Global.DashboardViews }}js/bootstrap-datetimepicker.min.js" type="text/javascript"></script>
	<script>
		var Request;
		var Modal;
		var Content;
		var MainSideBar;

			function ModalControl(){ 
					this.element 		= $('#DashboardModal');
					this.titleElement 	= this.element.find('.modal-title');
					this.bodyElement	= this.element.find('.modal-body');
					this.formElement	= this.element.find('form');
					this.notificationElement = this.element.find('.notifications');
			};
			ModalControl.prototype = {
				reset : function() {
					this.titleElement.html("");
					this.bodyElement.html("");
					this.notificationElement.html("");
					this.element.off('submit','form');
					return this;
				},

				title : function(title) {
					$(this.element).trigger('titleChange');
					this.titleElement.html(title);
					return this;
				},
				addNotification : function(note) {
					var n = $(note).hide();
					this.notificationElement.append(n);
					n.slideDown('slow');
					return this;
				},
				clearNotifications : function() {
					this.notificationElement.html("");
					return this;
				},
				body : function(body) {
					$(this.element).trigger('bodyChange');
					this.bodyElement.html(body);
					return this;
				},

				submit : function(sup) {
					this.element.on('submit','form',function(e) {
						e.preventDefault();
						sup();
					});
					return this;
				},
				open : function() {
					this.element.modal();
				},
				close : function() {
					this.element.modal('hide');
				}

			}

			var jsonListRenderer =  {
				render : function(data) {
					var returnS = "";
					$.each(data,function(k,f) {
						returnS = returnS + f.module_options_id;
					});

					return returnS;
				}
			};

			function mainSideBar(){}
			mainSideBar.prototype = {
				state : false,
				element : $('#mainSideBar'),
				open : function(callback) {
					if( this.state == false ) {
						if( typeof(callback) == "undefined") {
							callback = function(){};
						}
						$('#mainContent').css('width','80%');
						var that = this;
						this.element.show().animate({ width : '20%' },1000,function() {
							that.state = true;
							callback();
						});
					}
				},
				close : function(callback) {
					if( this.state == true ) {
						if( typeof(callback) == "undefined") {
							callback = function(){};
						}
						$('#mainContent').css('width','100%');
						that = this;
						this.element.animate({ width : '0%' },1000,function() {
								that.element.hide();
								that.state = false;
								callback();
							});
					}
				},
				addData : function(data, rendere) {
					this.element.off('click','**');
					if( typeof(rendere) == "undefined" ) {
						this.element.html(data);
					} else {
						this.element.html( rendere.render(data) );
					}

					return this;
				},
				subBar : {
					element : $('#sideBarExtra'),
					open : function(callback) {
						if( typeof(callback) == "undefined") {
							callback = function(){};
						}
						this.element.show().animate({ width : '20%' },1000,callback);
					},
					close : function(callback) {
						if( typeof(callback) == "undefined") {
							callback = function(){};
						}
						this.element.stop().animate({ width : '0%' },1000,function() {
							$(this).hide();
							callback();
						});
					},
					addData : function(data, rendere) {
						if( typeof(rendere) == "undefined" ) {
							this.element.html(data);
						} else {
							this.element.html( rendere.render(data) );
						}

						return this;
					},
				}
			};

			function contentArea(){};
			contentArea.prototype = {
				element : $('#mainContent'),
				addData : function(data, rendere) {
					if( typeof(rendere) == "undefined" ) {
						this.element.html(data);
					} else {
						this.element.html( rendere.render(data) );
					}

					return this;
				}
			}

			function RequestTool() {}
			RequestTool.prototype = {
				loadIncrement : 0,
				loadedCss : [],
				loadedJs : [],
				setPckClass : function (pckclass) {
					this.pckClass = pckclass;
				},
				setCall : function(call) {
					this.call = call;
				},
				loading : function(is) {
					if( is == true ) {
						$("#loader").show();
					} else {
						$("#loader").hide();
					}
				},
				loadScript : function(script,callback,container) {
					if( typeof(callback) == "undefined" || callback == null ) {
						callback = function() {}
					}

					if( $.inArray(script,this.loadedJs) > -1 ) {
						callback();
						return true;

					}
						    			
					
					
					if( typeof(container) != "undefined" && container != null && container == true ) {
						source = "/Module/Base.Dashboard/Dashboard/makeModularJs/"+this.loadIncrement+"?f="+script;
						this.loadIncrement++;
					} else {
						source = script;
					}

					$("<script>", {
						type : 'text/javascript',
						 src  : source,
						class: 'sidescript',
					}).appendTo('body');
					this.loadedJs.push(script);
					callback();
					
				},
				loadCss : function(css,callback) {

					if( typeof(callback) == "undefined" || callback == null ) {
						callback = function() {}
					}

					if( $.inArray(css,this.loadedCss) > -1 ) {
						callback();
						return true;

					}
					this.loadedCss.push(css);

						$('<link/>', {
						class : 'sidestyle',
						rel: 'stylesheet',
						type: 'text/css',
						href: css + "?t_="+Math.floor((Math.random()*1000)+1),
						}).appendTo('head');

						callback();
						return true;
				},
				clearScripts : function() {
					if( this.loadIncrement > 0 ) {
						for (var i = this.loadIncrement; i >= -1; i--) {
							window["data_"+i] = null;
							window["func"+i] = undefined;
							window["Holder"+i] = null;
							$('.sidescript').empty().remove();
							this.loadedJs = [];
							console.log( typeof( func1 )  );
						};
					}
				},
				clearScript : function(id) {

				},
				fetch : function(object) {
					var pckClass,call,method,type,arguments,success,error,dataType;
					if( typeof(object.pckClass) == "undefined" && typeof(this.pckClass) == "undefined" ) {
						console.log("Fetch requires the pckClass parameter");
						return false;
					} else { pckClass = this.pckClass = object.pckClass; }

					if( typeof(object.call) == "undefined" && typeof(this.call) ) {
						console.log("Fetch requires the call parameter");
						return false;
					} else { call = this.call = object.call; }

					if( typeof(object.method) == "undefined" ) {
						console.log("Fetch requires the method parameter");
						return false;
					} else { method = object.method; }

					if( typeof(object.type) == "undefined" ) {
						requestType = "post";
					} else { requestType = object.type; }

					if( typeof(object.arguments) == "undefined" ) {
						arguments = {};
					} else { arguments = object.arguments; }

					if( typeof(object.success) == "undefined" ) {
						success = function(){};
					} else { success = object.success; }

					if( typeof(object.error) == "undefined" ) {
						error = function(){};
					} else { error = object.error; }

					if( typeof(object.dataType) == "undefined" ) {
						
					} else { dataType = object.dataType; }

					var url = "/Module/"+pckClass+"/"+encodeURIComponent(call)+"/"+method;
					if( typeof(object.urlArguments) != "undefined") {
						url = url + "/"+object.urlArguments;
					}
					var that = this;
					this.loading(true);
					$.ajax({
					    url : url, type: requestType, data : arguments,
					    success: function(data) {

					    	if( typeof(object.noCss) == "undefined" ) {
						    	if( typeof(data.loadCss) != "undefined" ) {
						    		$.each(data.loadCss,function(key,css) {
						    			that.loadCss(css);
						    		});
						    	}
						    }

						    if( typeof(object.noJs) == "undefined" ) {
						    	if( typeof(data.loadScript) != "undefined" ) {
						    		$.each(data.loadScript,function(key,script) {
						    			window["data_"+that.loadIncrement] = data;
						    			that.loadScript(script,function() {},true);
						    		});
						    	}
					    	}



					    	success(data);
					    	that.loading(false);
					    },
					    error: function(data) {
					    	that.loading(false);
					    	alert("An error occured.");
					    	error();
					    },
					    dataType : dataType,
					});
				}
			}

			function LanguageControl(array) {
				this.langArray = array;
			};
			LanguageControl.prototype = {

				get : function(string, replace) {
					if( typeof(this.langArray[string]) != "undefined" || this.langArray[string] != null ) {
							if( typeof(replace) != "undefined" && typeof(replace) == "object" ) {
								that = this;
								$.each(replace, function(k,v) {
									that.langArray[string] = that.langArray[string].replace(k,v);
								});
							}
						return this.langArray[string];
					} else {
						return "";
					}
				}
			}

			$(function() {
				 //s.addData({hej : "dav"},jsonListRenderer).open();
				 Content 		= new contentArea();
				 MainSideBar 	= new mainSideBar();
				 Modal  		= new ModalControl();
				 Request 		= new RequestTool();

				 $('#sidePanel > div').click(function() {
				 	$('#sidePanel > div.active').removeClass('active');
				 	$(this).addClass('active');
				 	Request.clearScripts();
				 	MainSideBar.close();

					 Request.fetch(
					 		{
					 			pckClass : $(this).attr('module'),
					 			call : $(this).attr('file'),
					 			method : $(this).attr('method'),
					 			success : function(data) {
					 			},
					 		});
				 });
			});
	</script>
	{{ appendJs|raw }}
	</body>
</html>


{#
<!DOCTYPE html>
<html>
	<head>
		<link href="{{ Global.DashboardViews }}css/bootstrap.min.css" rel="stylesheet" type="text/css" />
		<link href="{{ Global.DashboardViews }}css/main.css" rel="stylesheet" type="text/css" />
		<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/themes/smoothness/jquery-ui.css" />
		<link href="{{ Global.DashboardViews }}css/bootstrap-datetimepicker.min.css" rel="stylesheet" type="text/css" />
	</head>
	<body>
	<div class="clearfix mainWrapper">
		<div class="col-lg-12 header">
			<ul>
				<!--<li>
					<span class="glyphicon glyphicon-th"></span>
				</li>
				<li>
					<span class="glyphicon glyphicon-tasks"></span>
				</li>-->
			</ul>
		</div>
		<div class="col-lg-1 sidebar fullHeight">
		<ul>

			{{ sidebar|raw }}

		</ul>

		</div>
		<div class="col-lg-11 content fullHeight">
				{{ content|raw }}
		</div>
	</div>

	<!--Javascript-->
	<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js" type="text/javascript"></script>
	<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
	<script src="{{ Global.DashboardViews }}js/bootstrap.min.js" type="text/javascript"></script>
	<script src="{{ Global.DashboardViews }}js/bootstrap-datetimepicker.min.js" type="text/javascript"></script>
	{{ appendJs|raw }}
	<script type="text/javascript">

	function dashboardAjax() {}

	dashboardAjax.prototype = {

		reloadAjaxHandlers : function() {
		var $this 					= this;
			$('[ajax="true"]').each(function() {
				var callPackage 	= $(this).attr('ajax-package');
				var callModule		= $(this).attr('ajax-module');
				var callClass 		= $(this).attr('ajax-class');
				var callMethod 		= $(this).attr('ajax-method');
				var callArgs 		= $(this).attr('ajax-args');
				var triggerEvent 	= $(this).attr('ajax-callbackFunc');
				var selector		= $(this).attr('ajax-selector');
				var injectat		= $(this).attr('ajax-inject-at');
				var container;
				if( typeof(selector) == "undefined" || selector == "" ) { selector = $(this); }
					else { selector = $(this).find(selector); }

				if( typeof(callArgs) == "undefined" || callArgs == "" ) { callArgs = {}; }

				if( typeof(injectat) == "undefined" || injectat == "" ) { container = $(".innerContent"); }
					else { container = $(injectat); }

				$(selector).on('click',function(e) {
					e.preventDefault();
					if( injectat == ".innerContent" ) { contentLoading(true); }
					$.ajax({
					    url : "/Module/"+callPackage+"/"+callModule,
					    type: "POST",
					    data : {  "class" : callClass, "method" : callMethod, args : callArgs },
					    success: function(data)
					    {
					    	container.html(data);
					    	if( injectat == ".innerContent" ) { contentLoading(false); }
					    		else if(injectat == ".subSide" ) {
					    			openSideBar();
					    		}

							if( typeof(triggerEvent) == "undefined" || triggerEvent == "" ) { }
								else {
									eval(triggerEvent+"();");
								}
							$this.reloadAjaxHandlers();
					    },
					    error: function (jqXHR)
					    {
					 
					    }
					});
				});

			});
		}

	}

		function sizeHeight() {
		$('.fullHeight')
			.height( parseInt($(window).height()) - parseInt($('.mainWrapper .header').height() ) );
		}

		$(function() {
			db = new dashboardAjax;
				db.reloadAjaxHandlers();
				sizeHeight();

			    $('.datepicker').datetimepicker({
			      language: 'da'
			    });

			$(window).resize(function() { sizeHeight(); });

		});
	</script>
	</body>
</html>#}